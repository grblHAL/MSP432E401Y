%%{
/*
 * Copyright (c) 2019-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ====== ComparatorMSP432E4.Board.c.xdt =====
 */
    let Common = system.getScript("/ti/drivers/Common.js");
    let Comparator = args[0];
    let instances = Comparator.$instances;
    let compGlobal = Comparator.$static;

    let countDef = Comparator.defaultInstanceName + "COUNT";

    let declarations = Common.genBoardDeclarations(instances);

    function convertTrigLevel(level, type) {
        let base = "ComparatorMSP432E4_" + type + "_";
        if(level === "Output High") {
            return base + "HIGH";
        } else if(level === "Output Low") {
            return base + "LOW";
        } else if(level === "Rising Edge") {
            return base + "RISE";
        } else if(level === "Falling Edge") {
            return base + "FALL";
        } else if(level === "Both Edges") {
            return base + "BOTH";
        } else {
            return base + "NONE";
        }
    }
%%}

/*
 *  ============= Comparator ===============
 */

#include <ti/drivers/Comparator.h>
#include <ti/drivers/comparator/ComparatorMSP432E4.h>
#include <ti/devices/msp432e4/driverlib/interrupt.h>

#define `countDef` `instances.length`

/*
 *  ====== ComparatorMSP432E4Objects =======
 */
ComparatorMSP432E4_Object ComparatorMSP432E4Objects[`countDef`];

/*
 *  ===== ComparatorMSP432E4HWAttrs ========
 */
const ComparatorMSP432E4_HWAttrs ComparatorMSP432E4HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    % let peripheralName = inst.$name;
    % let compNum = peripheralName.match(/\d/)[0];
    % let realName = "COMP" + compNum;
    %
    % let positiveInput;
    % if(inst.positiveInputSource === "Internal Reference") {
    %     positiveInput = "ComparatorMSP432E4_INPUT_REF";
    % } else if(inst.positiveInputSource === "Comparator Pin") {
    %     positiveInput = "ComparatorMSP432E4_INPUT_PIN";
    % } else {
    %     positiveInput = "ComparatorMSP432E4_INPUT_PIN0";
    % }
    %
    % let displayRefVoltage = compGlobal.referenceLevel;
    % let refVoltage = "ComparatorMSP432E4_REF_" + displayRefVoltage.replace(".", "_");
    % let pin;
    % if(inst.outputEnable === true)
    % {
    %   pin = realName + "_OUTPUT_PIN_" + inst.comparator.outputPin.$solution.devicePinName;
    % }
    % else
    % {
    %   pin = "COMP_NO_OUTPUT";
    % }
    %
    % let trigLevel = convertTrigLevel(inst.triggerLevel, "TRIG");
    {
        .compNum = `compNum`,
        .intNum = INT_`realName`,
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .positiveTerminal = `positiveInput`,
        .refLevel = `refVoltage`,
        .triggerLevel = `trigLevel`,
        .outputPin = `pin`
    },

% }
};

/*
 *  ===== Comparator_config ====
 */
const Comparator_Config Comparator_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    {
        .fxnTablePtr = &ComparatorMSP432E4_fxnTable,
        .object = &ComparatorMSP432E4Objects[`inst.$name`],
        .hwAttrs = &ComparatorMSP432E4HWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t Comparator_count = `countDef`;
